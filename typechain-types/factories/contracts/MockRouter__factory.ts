/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  MockRouter,
  MockRouterInterface,
} from "../../contracts/MockRouter";

const _abi = [
  {
    inputs: [],
    name: "InsufficientFeeTokenAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidMsgValue",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destChainSelector",
        type: "uint64",
      },
    ],
    name: "UnsupportedDestinationChain",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "receiver",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "tokenAmounts",
            type: "tuple[]",
          },
          {
            internalType: "address",
            name: "feeToken",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "extraArgs",
            type: "bytes",
          },
        ],
        internalType: "struct Client.EVM2AnyMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "ccipSend",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "receiver",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "tokenAmounts",
            type: "tuple[]",
          },
          {
            internalType: "address",
            name: "feeToken",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "extraArgs",
            type: "bytes",
          },
        ],
        internalType: "struct Client.EVM2AnyMessage",
        name: "",
        type: "tuple",
      },
    ],
    name: "getFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    name: "getSupportedTokens",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    name: "isChainSupported",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610933806100206000396000f3fe60806040526004361061003f5760003560e01c806320487ded1461004457806396f4e9f914610081578063a48a9058146100b1578063fbca3b74146100ee575b600080fd5b34801561005057600080fd5b5061006b60048036038101906100669190610624565b61012b565b604051610078919061068f565b60405180910390f35b61009b60048036038101906100969190610624565b61013d565b6040516100a891906106c3565b60405180910390f35b3480156100bd57600080fd5b506100d860048036038101906100d391906106de565b61017a565b6040516100e59190610726565b60405180910390f35b3480156100fa57600080fd5b50610115600480360381019061011091906106de565b610185565b60405161012291906107ff565b60405180910390f35b6000662386f26fc10000905092915050565b6000828260000151836020015160405160200161015c939291906108c8565b60405160208183030381529060405280519060200120905092915050565b600060019050919050565b6060600067ffffffffffffffff8111156101a2576101a1610242565b5b6040519080825280602002602001820160405280156101d05781602001602082028036833780820191505090505b509050919050565b6000604051905090565b600080fd5b600080fd5b600067ffffffffffffffff82169050919050565b610209816101ec565b811461021457600080fd5b50565b60008135905061022681610200565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61027a82610231565b810181811067ffffffffffffffff8211171561029957610298610242565b5b80604052505050565b60006102ac6101d8565b90506102b88282610271565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff8211156102e7576102e6610242565b5b6102f082610231565b9050602081019050919050565b82818337600083830152505050565b600061031f61031a846102cc565b6102a2565b90508281526020810184848401111561033b5761033a6102c7565b5b6103468482856102fd565b509392505050565b600082601f830112610363576103626102c2565b5b813561037384826020860161030c565b91505092915050565b600067ffffffffffffffff82111561039757610396610242565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103d8826103ad565b9050919050565b6103e8816103cd565b81146103f357600080fd5b50565b600081359050610405816103df565b92915050565b6000819050919050565b61041e8161040b565b811461042957600080fd5b50565b60008135905061043b81610415565b92915050565b6000604082840312156104575761045661022c565b5b61046160406102a2565b90506000610471848285016103f6565b60008301525060206104858482850161042c565b60208301525092915050565b60006104a461049f8461037c565b6102a2565b905080838252602082019050604084028301858111156104c7576104c66103a8565b5b835b818110156104f057806104dc8882610441565b8452602084019350506040810190506104c9565b5050509392505050565b600082601f83011261050f5761050e6102c2565b5b813561051f848260208601610491565b91505092915050565b600060a0828403121561053e5761053d61022c565b5b61054860a06102a2565b9050600082013567ffffffffffffffff811115610568576105676102bd565b5b6105748482850161034e565b600083015250602082013567ffffffffffffffff811115610598576105976102bd565b5b6105a48482850161034e565b602083015250604082013567ffffffffffffffff8111156105c8576105c76102bd565b5b6105d4848285016104fa565b60408301525060606105e8848285016103f6565b606083015250608082013567ffffffffffffffff81111561060c5761060b6102bd565b5b6106188482850161034e565b60808301525092915050565b6000806040838503121561063b5761063a6101e2565b5b600061064985828601610217565b925050602083013567ffffffffffffffff81111561066a576106696101e7565b5b61067685828601610528565b9150509250929050565b6106898161040b565b82525050565b60006020820190506106a46000830184610680565b92915050565b6000819050919050565b6106bd816106aa565b82525050565b60006020820190506106d860008301846106b4565b92915050565b6000602082840312156106f4576106f36101e2565b5b600061070284828501610217565b91505092915050565b60008115159050919050565b6107208161070b565b82525050565b600060208201905061073b6000830184610717565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610776816103cd565b82525050565b6000610788838361076d565b60208301905092915050565b6000602082019050919050565b60006107ac82610741565b6107b6818561074c565b93506107c18361075d565b8060005b838110156107f25781516107d9888261077c565b97506107e483610794565b9250506001810190506107c5565b5085935050505092915050565b6000602082019050818103600083015261081981846107a1565b905092915050565b60008160c01b9050919050565b600061083982610821565b9050919050565b61085161084c826101ec565b61082e565b82525050565b600081519050919050565b600081905092915050565b60005b8381101561088b578082015181840152602081019050610870565b60008484015250505050565b60006108a282610857565b6108ac8185610862565b93506108bc81856020860161086d565b80840191505092915050565b60006108d48286610840565b6008820191506108e48285610897565b91506108f08284610897565b915081905094935050505056fea264697066735822122094950f7356305b730495ad3e97d7858ed5d855027e49b74c77dc944ea1183c7d64736f6c63430008130033";

type MockRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockRouter__factory extends ContractFactory {
  constructor(...args: MockRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockRouter & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockRouter__factory {
    return super.connect(runner) as MockRouter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockRouterInterface {
    return new Interface(_abi) as MockRouterInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockRouter {
    return new Contract(address, _abi, runner) as unknown as MockRouter;
  }
}
